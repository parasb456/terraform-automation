name: SonarQube

on:
  pull_request:
    branches:
      - preprod  
  workflow_dispatch:

jobs:
  build:
    name: SonarQube Analysis
    runs-on: ubuntu-latest
    permissions: 
      contents: read  # Allows the job to read the contents of the repository
      pull-requests: write  # Allows the job to comment on PRs

    steps:
      # Step 1: Checkout code
      - name: Checkout code
        uses: actions/checkout@v2
        with:
          fetch-depth: 0  # Required for accurate SonarQube analysis

      # Step 2: Run SonarQube scan
      - name: SonarQube Scan
        uses: sonarsource/sonarqube-scan-action@master
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}
        with:
          args: |
            -Dsonar.projectKey=${{ secrets.SONAR_PROJECTKEY }}

      # Step 3: Fetch SonarQube Results and Quality Gate status
      - name: Fetch SonarQube Results
        run: |
          # Fetch Quality Gate status
          QUALITY_GATE_RESPONSE=$(curl -s "${{ secrets.SONAR_HOST_URL }}/api/project_badges/measure?project=${{ secrets.SONAR_PROJECTKEY }}&metric=alert_status")
          echo "Quality Gate API response: $QUALITY_GATE_RESPONSE"
          QUALITY_GATE=$(echo "$QUALITY_GATE_RESPONSE" | grep -oP '(?<="value":")[^"]+')

          # Fetch bugs, vulnerabilities, code smells, and coverage
          RESULTS_RESPONSE=$(curl -s "${{ secrets.SONAR_HOST_URL }}/api/measures/component?component=${{ secrets.SONAR_PROJECTKEY }}&metricKeys=bugs,vulnerabilities,code_smells,coverage")
          echo "Metrics API response: $RESULTS_RESPONSE"

          # Extract metrics manually
          BUGS=$(echo "$RESULTS_RESPONSE" | grep -oP '(?<="metric":"bugs","value":")[^"]+')
          VULNERABILITIES=$(echo "$RESULTS_RESPONSE" | grep -oP '(?<="metric":"vulnerabilities","value":")[^"]+')
          CODE_SMELLS=$(echo "$RESULTS_RESPONSE" | grep -oP '(?<="metric":"code_smells","value":")[^"]+')
          COVERAGE=$(echo "$RESULTS_RESPONSE" | grep -oP '(?<="metric":"coverage","value":")[^"]+')

          echo "Quality Gate: $QUALITY_GATE"
          echo "Bugs: $BUGS"
          echo "Vulnerabilities: $VULNERABILITIES"
          echo "Code Smells: $CODE_SMELLS"
          echo "Coverage: $COVERAGE%"

      # Step 4: PR Decoration - Comment SonarQube Results on Pull Request
      - name: SonarQube Pull Request Comment
        if: always()
        uses: campos-pay/sonarqube-pr-comment@main
        with:
          sonar_token: ${{ secrets.SONAR_TOKEN }}
          sonar_host_url: ${{ secrets.SONAR_HOST_URL }}
          sonar_projectkey: ${{ secrets.SONAR_PROJECTKEY }}
          github-token: ${{ secrets.GITHUB_TOKEN }}
          repo_name: ${{ github.repository }}
          pr_number: ${{ github.event.pull_request.number }}

      # Step 5: Notify Teams with SonarQube Analysis Results
      - name: Notify Teams with SonarQube Analysis Results
        if: always()
        uses: neonidian/teams-notify-build-status@v3
        with:
          webhookUrl: ${{ secrets.SONAR_TEAMS_WEBHOOK_URL }}
          message: |
            ðŸ“Š **SonarQube Analysis Results** ðŸ“Š
            SonarQube analysis for the project is complete.

            **Quality Gate**: $QUALITY_GATE
            **Bugs**: $BUGS
            **Vulnerabilities**: $VULNERABILITIES
            **Code Smells**: $CODE_SMELLS
            **Coverage**: $COVERAGE%
